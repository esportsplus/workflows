name: deploy
on:
  workflow_call:
    secrets:
      ACCESS_TOKEN:
        required: true
      DEPLOY_DESTINATION:
        required: false
      DEPLOY_PREBUILD:
        required: false
      DEPLOY_POSTBUILD:
        required: false
      DEPLOY_POSTINSTALL:
        required: false
      DOCKER_COMPOSE_CONFIG:
        required: false
      ENV:
        required: true
      SSH_HOST:
        required: true
      SSH_KEY:
        required: true
      SSH_USERNAME:
        required: true
      SSL_CERTIFICATE:
        required: true
      SSL_PRIVATE_KEY:
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            DEPLOY_DESTINATION="${{ secrets.DEPLOY_DESTINATION || './node' }}"
            DOCKER_COMPOSE_CONFIG="${{ secrets.DOCKER_COMPOSE_CONFIG || '-f docker-compose.yml' }}"
            GITHUB_TOKEN="${{ secrets.ACCESS_TOKEN }}"
            INSTALL=false
            PULL="https://raw.githubusercontent.com/esportsplus/git/main/scripts/pull"

            run() {
              [ -z "$1" ] && return
              echo "$1" | while read -r script; do
                [ -n "$script" ] && chmod +x "$script" && "$script"
              done
            }

            mkdir -p /var/www && cd "$_"

            # Delete everything in `/var/www` excluding `/var/www/storage`
            shopt -s extglob
            rm -rf !(storage)

            curl -s ${PULL} | bash /dev/stdin https://${GITHUB_TOKEN}@github.com/esportsplus/docker-compose.git .

            # Environment variables
            echo "${{ secrets.ENV }}" > .env
            echo -e "\nDOCKER_GID=$(getent group docker | cut -d: -f3)" >> .env

            # SSL certificates
            mkdir -p ./storage/ssl
            echo "${{ secrets.SSL_CERTIFICATE }}" > ./storage/ssl/certificate.pem
            echo "${{ secrets.SSL_PRIVATE_KEY }}" > ./storage/ssl/key.pem

            # Install Docker Compose
            if ! command -v docker compose &> /dev/null
            then
              INSTALL=true

              # Update package list
              sudo apt-get update -y

              # Upgrade existing extensions
              sudo apt-get upgrade -y
              sudo apt-get dist-upgrade -y

              # Add Docker's official GPG key:
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg

              # Add Docker repository to Apt sources:
              echo \
                "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y

              # Install
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

              run "${{ secrets.DEPLOY_POSTINSTALL }}"
            fi

            # Fetch Application
            curl -s ${PULL} | bash /dev/stdin https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git ${DEPLOY_DESTINATION}

            run "${{ secrets.DEPLOY_PREBUILD }}"

            docker compose ${DOCKER_COMPOSE_CONFIG} build

            run "${{ secrets.DEPLOY_POSTBUILD }}"

            # Restart Services With New Images
            docker compose ps -q | xargs docker inspect -f '{{.Id}} {{.Name}}' |
            while read -r id name; do
                old_id=$(docker inspect -f '{{.Image}}' "$name" 2>/dev/null || echo '')
                old_id=${old_id#sha256:}

                if [ "$id" != "$old_id" ]; then
                    service=$(echo "$name" | sed 's/.*-\(.*\)-[0-9]*$/\1/')
                    service=${service#/}

                    echo "Restarting $service $id $old_id $name"
                    docker compose restart "$service"
                fi
            done

            # Cleanup or Start Containers If Fresh Install
            docker compose ${DOCKER_COMPOSE_CONFIG} up --detach --remove-orphans

            # Cleanup
            docker system prune --filter until=24h --force
            docker builder prune --filter unused-for=24h --force

            if ${INSTALL}; then
              sudo reboot
            fi